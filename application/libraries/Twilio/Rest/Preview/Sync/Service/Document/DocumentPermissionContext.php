<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Preview\Sync\Service\Document;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Serialize;
use Twilio\Values;
use Twilio\Version;

/**
 * PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you currently do not have developer preview access, please contact help@twilio.com.
 */
class DocumentPermissionContext extends InstanceContext
{
    /**
     * Initialize the DocumentPermissionContext.
     *
     * @param Version $version     Version that contains the resource
     * @param string  $serviceSid  The service_sid
     * @param string  $documentSid sync Document SID or unique name
     * @param string  $identity    identity of the user to whom the Sync Document
     *                             Permission applies
     */
    public function __construct(Version $version, $serviceSid, $documentSid, $identity)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = [
            'serviceSid' => $serviceSid,
            'documentSid' => $documentSid,
            'identity' => $identity,
        ];

        $this->uri = '/Services/'.\rawurlencode($serviceSid).'/Documents/'.\rawurlencode($documentSid).'/Permissions/'.\rawurlencode($identity).'';
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.Preview.Sync.DocumentPermissionContext '.\implode(' ', $context).']';
    }

    /**
     * Fetch the DocumentPermissionInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return DocumentPermissionInstance Fetched DocumentPermissionInstance
     */
    public function fetch(): DocumentPermissionInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);

        return new DocumentPermissionInstance(
            $this->version,
            $payload,
            $this->solution['serviceSid'],
            $this->solution['documentSid'],
            $this->solution['identity']
        );
    }

    /**
     * Delete the DocumentPermissionInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return bool True if delete succeeds, false otherwise
     */
    public function delete(): bool
    {
        return $this->version->delete('DELETE', $this->uri);
    }

    /**
     * Update the DocumentPermissionInstance.
     *
     * @param bool $read   read access
     * @param bool $write  write access
     * @param bool $manage manage access
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return DocumentPermissionInstance Updated DocumentPermissionInstance
     */
    public function update(bool $read, bool $write, bool $manage): DocumentPermissionInstance
    {
        $data = Values::of([
            'Read' => Serialize::booleanToString($read),
            'Write' => Serialize::booleanToString($write),
            'Manage' => Serialize::booleanToString($manage),
        ]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new DocumentPermissionInstance(
            $this->version,
            $payload,
            $this->solution['serviceSid'],
            $this->solution['documentSid'],
            $this->solution['identity']
        );
    }
}
