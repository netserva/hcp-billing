<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Conversations\V1\Service\Conversation\Message;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Version;

class DeliveryReceiptContext extends InstanceContext
{
    /**
     * Initialize the DeliveryReceiptContext.
     *
     * @param Version $version         Version that contains the resource
     * @param string  $chatServiceSid  the SID of the Conversation Service that the
     *                                 resource is associated with
     * @param string  $conversationSid the unique ID of the Conversation for this
     *                                 delivery receipt
     * @param string  $messageSid      the SID of the message the delivery receipt
     *                                 belongs to
     * @param string  $sid             a 34 character string that uniquely identifies this
     *                                 resource
     */
    public function __construct(Version $version, $chatServiceSid, $conversationSid, $messageSid, $sid)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = [
            'chatServiceSid' => $chatServiceSid,
            'conversationSid' => $conversationSid,
            'messageSid' => $messageSid,
            'sid' => $sid,
        ];

        $this->uri = '/Services/'.\rawurlencode($chatServiceSid).'/Conversations/'.\rawurlencode($conversationSid).'/Messages/'.\rawurlencode($messageSid).'/Receipts/'.\rawurlencode($sid).'';
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.Conversations.V1.DeliveryReceiptContext '.\implode(' ', $context).']';
    }

    /**
     * Fetch the DeliveryReceiptInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return DeliveryReceiptInstance Fetched DeliveryReceiptInstance
     */
    public function fetch(): DeliveryReceiptInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);

        return new DeliveryReceiptInstance(
            $this->version,
            $payload,
            $this->solution['chatServiceSid'],
            $this->solution['conversationSid'],
            $this->solution['messageSid'],
            $this->solution['sid']
        );
    }
}
