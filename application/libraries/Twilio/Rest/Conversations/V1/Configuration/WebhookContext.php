<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Conversations\V1\Configuration;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Options;
use Twilio\Serialize;
use Twilio\Values;
use Twilio\Version;

class WebhookContext extends InstanceContext
{
    /**
     * Initialize the WebhookContext.
     *
     * @param Version $version Version that contains the resource
     */
    public function __construct(Version $version)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = [];

        $this->uri = '/Configuration/Webhooks';
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.Conversations.V1.WebhookContext '.\implode(' ', $context).']';
    }

    /**
     * Fetch the WebhookInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return WebhookInstance Fetched WebhookInstance
     */
    public function fetch(): WebhookInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);

        return new WebhookInstance($this->version, $payload);
    }

    /**
     * Update the WebhookInstance.
     *
     * @param array|Options $options Optional Arguments
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return WebhookInstance Updated WebhookInstance
     */
    public function update(array $options = []): WebhookInstance
    {
        $options = new Values($options);

        $data = Values::of([
            'Method' => $options['method'],
            'Filters' => Serialize::map($options['filters'], fn ($e) => $e),
            'PreWebhookUrl' => $options['preWebhookUrl'],
            'PostWebhookUrl' => $options['postWebhookUrl'],
            'Target' => $options['target'],
        ]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new WebhookInstance($this->version, $payload);
    }
}
