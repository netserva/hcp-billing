<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\ListResource;
use Twilio\Rest\Api\V2010\Account\Usage\RecordList;
use Twilio\Rest\Api\V2010\Account\Usage\TriggerList;
use Twilio\Version;

/**
 * @property RecordList  $records
 * @property TriggerList $triggers
 *
 * @method \Twilio\Rest\Api\V2010\Account\Usage\TriggerContext triggers(string $sid)
 */
class UsageList extends ListResource
{
    protected $_records;
    protected $_triggers;

    /**
     * Construct the UsageList.
     *
     * @param Version $version    Version that contains the resource
     * @param string  $accountSid a 34 character string that uniquely identifies
     *                            this resource
     */
    public function __construct(Version $version, string $accountSid)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = ['accountSid' => $accountSid];
    }

    /**
     * Magic getter to lazy load subresources.
     *
     * @param string $name Subresource to return
     *
     * @throws TwilioException For unknown subresources
     *
     * @return \Twilio\ListResource The requested subresource
     */
    public function __get(string $name)
    {
        if (\property_exists($this, '_'.$name)) {
            $method = 'get'.\ucfirst($name);

            return $this->{$method}();
        }

        throw new TwilioException('Unknown subresource '.$name);
    }

    /**
     * Magic caller to get resource contexts.
     *
     * @param string $name      Resource to return
     * @param array  $arguments Context parameters
     *
     * @throws TwilioException For unknown resource
     *
     * @return InstanceContext The requested resource context
     */
    public function __call(string $name, array $arguments): InstanceContext
    {
        $property = $this->{$name};
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array([$property, 'getContext'], $arguments);
        }

        throw new TwilioException('Resource does not have a context');
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        return '[Twilio.Api.V2010.UsageList]';
    }

    /**
     * Access the records.
     */
    protected function getRecords(): RecordList
    {
        if (!$this->_records) {
            $this->_records = new RecordList($this->version, $this->solution['accountSid']);
        }

        return $this->_records;
    }

    /**
     * Access the triggers.
     */
    protected function getTriggers(): TriggerList
    {
        if (!$this->_triggers) {
            $this->_triggers = new TriggerList($this->version, $this->solution['accountSid']);
        }

        return $this->_triggers;
    }
}
