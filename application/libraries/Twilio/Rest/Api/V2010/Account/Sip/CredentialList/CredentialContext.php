<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account\Sip\CredentialList;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Options;
use Twilio\Values;
use Twilio\Version;

class CredentialContext extends InstanceContext
{
    /**
     * Initialize the CredentialContext.
     *
     * @param Version $version           Version that contains the resource
     * @param string  $accountSid        the unique id of the Account that is responsible
     *                                   for this resource
     * @param string  $credentialListSid The unique id that identifies the
     *                                   credential list that contains the desired
     *                                   credential
     * @param string  $sid               the unique id that identifies the resource to fetch
     */
    public function __construct(Version $version, $accountSid, $credentialListSid, $sid)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = [
            'accountSid' => $accountSid,
            'credentialListSid' => $credentialListSid,
            'sid' => $sid,
        ];

        $this->uri = '/Accounts/'.\rawurlencode($accountSid).'/SIP/CredentialLists/'.\rawurlencode($credentialListSid).'/Credentials/'.\rawurlencode($sid).'.json';
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.Api.V2010.CredentialContext '.\implode(' ', $context).']';
    }

    /**
     * Fetch the CredentialInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return CredentialInstance Fetched CredentialInstance
     */
    public function fetch(): CredentialInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);

        return new CredentialInstance(
            $this->version,
            $payload,
            $this->solution['accountSid'],
            $this->solution['credentialListSid'],
            $this->solution['sid']
        );
    }

    /**
     * Update the CredentialInstance.
     *
     * @param array|Options $options Optional Arguments
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return CredentialInstance Updated CredentialInstance
     */
    public function update(array $options = []): CredentialInstance
    {
        $options = new Values($options);

        $data = Values::of(['Password' => $options['password']]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new CredentialInstance(
            $this->version,
            $payload,
            $this->solution['accountSid'],
            $this->solution['credentialListSid'],
            $this->solution['sid']
        );
    }

    /**
     * Delete the CredentialInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return bool True if delete succeeds, false otherwise
     */
    public function delete(): bool
    {
        return $this->version->delete('DELETE', $this->uri);
    }
}
