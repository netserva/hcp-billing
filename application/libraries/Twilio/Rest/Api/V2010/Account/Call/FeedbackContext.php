<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Api\V2010\Account\Call;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Options;
use Twilio\Serialize;
use Twilio\Values;
use Twilio\Version;

class FeedbackContext extends InstanceContext
{
    /**
     * Initialize the FeedbackContext.
     *
     * @param Version $version    Version that contains the resource
     * @param string  $accountSid The unique sid that identifies this account
     * @param string  $callSid    The call sid that uniquely identifies the call
     */
    public function __construct(Version $version, $accountSid, $callSid)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = ['accountSid' => $accountSid, 'callSid' => $callSid];

        $this->uri = '/Accounts/'.\rawurlencode($accountSid).'/Calls/'.\rawurlencode($callSid).'/Feedback.json';
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.Api.V2010.FeedbackContext '.\implode(' ', $context).']';
    }

    /**
     * Fetch the FeedbackInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return FeedbackInstance Fetched FeedbackInstance
     */
    public function fetch(): FeedbackInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);

        return new FeedbackInstance(
            $this->version,
            $payload,
            $this->solution['accountSid'],
            $this->solution['callSid']
        );
    }

    /**
     * Create the FeedbackInstance.
     *
     * @param int           $qualityScore The call quality expressed as an integer from 1 to 5
     * @param array|Options $options      Optional Arguments
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return FeedbackInstance Created FeedbackInstance
     */
    public function create(int $qualityScore, array $options = []): FeedbackInstance
    {
        $options = new Values($options);

        $data = Values::of([
            'QualityScore' => $qualityScore,
            'Issue' => Serialize::map($options['issue'], fn ($e) => $e),
        ]);

        $payload = $this->version->create('POST', $this->uri, [], $data);

        return new FeedbackInstance(
            $this->version,
            $payload,
            $this->solution['accountSid'],
            $this->solution['callSid']
        );
    }

    /**
     * Update the FeedbackInstance.
     *
     * @param array|Options $options Optional Arguments
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return FeedbackInstance Updated FeedbackInstance
     */
    public function update(array $options = []): FeedbackInstance
    {
        $options = new Values($options);

        $data = Values::of([
            'QualityScore' => $options['qualityScore'],
            'Issue' => Serialize::map($options['issue'], fn ($e) => $e),
        ]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new FeedbackInstance(
            $this->version,
            $payload,
            $this->solution['accountSid'],
            $this->solution['callSid']
        );
    }
}
