<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Supersim\V1\NetworkAccessProfile;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceResource;
use Twilio\Values;
use Twilio\Version;

/**
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 *
 * @property string  $sid
 * @property string  $networkAccessProfileSid
 * @property string  $friendlyName
 * @property string  $isoCountry
 * @property array[] $identifiers
 * @property string  $url
 */
class NetworkAccessProfileNetworkInstance extends InstanceResource
{
    /**
     * Initialize the NetworkAccessProfileNetworkInstance.
     *
     * @param Version $version                 Version that contains the resource
     * @param mixed[] $payload                 The response payload
     * @param string  $networkAccessProfileSid The unique string that identifies the
     *                                         Network Access Profile resource
     * @param string  $sid                     The SID of the resource to fetch
     */
    public function __construct(Version $version, array $payload, string $networkAccessProfileSid, string $sid = null)
    {
        parent::__construct($version);

        // Marshaled Properties
        $this->properties = [
            'sid' => Values::array_get($payload, 'sid'),
            'networkAccessProfileSid' => Values::array_get($payload, 'network_access_profile_sid'),
            'friendlyName' => Values::array_get($payload, 'friendly_name'),
            'isoCountry' => Values::array_get($payload, 'iso_country'),
            'identifiers' => Values::array_get($payload, 'identifiers'),
            'url' => Values::array_get($payload, 'url'),
        ];

        $this->solution = [
            'networkAccessProfileSid' => $networkAccessProfileSid,
            'sid' => $sid ?: $this->properties['sid'],
        ];
    }

    /**
     * Magic getter to access properties.
     *
     * @param string $name Property to access
     *
     * @throws TwilioException For unknown properties
     *
     * @return mixed The requested property
     */
    public function __get(string $name)
    {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }

        if (\property_exists($this, '_'.$name)) {
            $method = 'get'.\ucfirst($name);

            return $this->{$method}();
        }

        throw new TwilioException('Unknown property: '.$name);
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.Supersim.V1.NetworkAccessProfileNetworkInstance '.\implode(' ', $context).']';
    }

    /**
     * Delete the NetworkAccessProfileNetworkInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return bool True if delete succeeds, false otherwise
     */
    public function delete(): bool
    {
        return $this->proxy()->delete();
    }

    /**
     * Fetch the NetworkAccessProfileNetworkInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return NetworkAccessProfileNetworkInstance Fetched
     *                                             NetworkAccessProfileNetworkInstance
     */
    public function fetch(): NetworkAccessProfileNetworkInstance
    {
        return $this->proxy()->fetch();
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context.
     *
     * @return NetworkAccessProfileNetworkContext Context for this
     *                                            NetworkAccessProfileNetworkInstance
     */
    protected function proxy(): NetworkAccessProfileNetworkContext
    {
        if (!$this->context) {
            $this->context = new NetworkAccessProfileNetworkContext(
                $this->version,
                $this->solution['networkAccessProfileSid'],
                $this->solution['sid']
            );
        }

        return $this->context;
    }
}
