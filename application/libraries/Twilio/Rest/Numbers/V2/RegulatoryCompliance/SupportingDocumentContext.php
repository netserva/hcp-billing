<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\Numbers\V2\RegulatoryCompliance;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Options;
use Twilio\Serialize;
use Twilio\Values;
use Twilio\Version;

class SupportingDocumentContext extends InstanceContext
{
    /**
     * Initialize the SupportingDocumentContext.
     *
     * @param Version $version Version that contains the resource
     * @param string  $sid     The unique string that identifies the resource
     */
    public function __construct(Version $version, $sid)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = ['sid' => $sid];

        $this->uri = '/RegulatoryCompliance/SupportingDocuments/'.\rawurlencode($sid).'';
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.Numbers.V2.SupportingDocumentContext '.\implode(' ', $context).']';
    }

    /**
     * Fetch the SupportingDocumentInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return SupportingDocumentInstance Fetched SupportingDocumentInstance
     */
    public function fetch(): SupportingDocumentInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);

        return new SupportingDocumentInstance($this->version, $payload, $this->solution['sid']);
    }

    /**
     * Update the SupportingDocumentInstance.
     *
     * @param array|Options $options Optional Arguments
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return SupportingDocumentInstance Updated SupportingDocumentInstance
     */
    public function update(array $options = []): SupportingDocumentInstance
    {
        $options = new Values($options);

        $data = Values::of([
            'FriendlyName' => $options['friendlyName'],
            'Attributes' => Serialize::jsonObject($options['attributes']),
        ]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new SupportingDocumentInstance($this->version, $payload, $this->solution['sid']);
    }

    /**
     * Delete the SupportingDocumentInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return bool True if delete succeeds, false otherwise
     */
    public function delete(): bool
    {
        return $this->version->delete('DELETE', $this->uri);
    }
}
