<?php

declare(strict_types=1);

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0.
 * /       /
 */

namespace Twilio\Rest\FrontlineApi\V1;

use Twilio\Exceptions\TwilioException;
use Twilio\InstanceContext;
use Twilio\Options;
use Twilio\Values;
use Twilio\Version;

/**
 * PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
 */
class UserContext extends InstanceContext
{
    /**
     * Initialize the UserContext.
     *
     * @param Version $version Version that contains the resource
     * @param string  $sid     The SID of the User resource to fetch
     */
    public function __construct(Version $version, $sid)
    {
        parent::__construct($version);

        // Path Solution
        $this->solution = ['sid' => $sid];

        $this->uri = '/Users/'.\rawurlencode($sid).'';
    }

    /**
     * Provide a friendly representation.
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }

        return '[Twilio.FrontlineApi.V1.UserContext '.\implode(' ', $context).']';
    }

    /**
     * Fetch the UserInstance.
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return UserInstance Fetched UserInstance
     */
    public function fetch(): UserInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);

        return new UserInstance($this->version, $payload, $this->solution['sid']);
    }

    /**
     * Update the UserInstance.
     *
     * @param array|Options $options Optional Arguments
     *
     * @throws TwilioException when an HTTP error occurs
     *
     * @return UserInstance Updated UserInstance
     */
    public function update(array $options = []): UserInstance
    {
        $options = new Values($options);

        $data = Values::of([
            'FriendlyName' => $options['friendlyName'],
            'Avatar' => $options['avatar'],
            'State' => $options['state'],
        ]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new UserInstance($this->version, $payload, $this->solution['sid']);
    }
}
